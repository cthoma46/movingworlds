// sets width and height properties, if provided
size(w=false, h=false)
	if w
		width: w
	if h
		height: h

// sets width and height to the same size
square(s)
	size(s, s)

// convenience for black with alpha channel
black(alpha=1)
	rgba(0, 0, 0, alpha)

// convenience for white with alpha channel
white(alpha=1)
	rgba(255, 255, 255, alpha)

// cross-browser border-radius
bdrz()
	-webkit-border-radius arguments
	-moz-border-radius arguments
	border-radius arguments
	
// cross-browser box-shadow
bxsh()
	-moz-box-shadow arguments
	-webkit-box-shadow arguments
	box-shadow arguments
 
// cross-browser box-sizing
box-sizing()
	-moz-box-sizing: arguments
	-ms-box-sizing: arguments
	-webkit-box-sizing: arguments
	-khtml-box-sizing: arguments
	box-sizing: arguments 

// nifty box-shadow highlight
highlight(alpha=1)
	bxsh(0 1px 0 rgba(255, 255, 255, alpha) inset)
	
// simple gradient between two colors
// TODO: support for fancy gradients with multiple stops
grad(color1, color2)
	background: color1;
	background: -moz-linear-gradient(top,  color1 0%, color2 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,color1), color-stop(100%,color2));
	background: -webkit-linear-gradient(top,  color1 0%,color2 100%);
	background: -o-linear-gradient(top,  color1 0%,color2 100%);
	background: -ms-linear-gradient(top,  color1 0%,color2 100%);
	background: linear-gradient(top,  color1 0%,color2 100%);
	filter: unquote("progid:DXImageTransform.Microsoft.gradient( startColorstr="+color1+", endColorstr="+color2+",GradientType=0 );")

// horizontally centers an element using absolute positioning and negative half-width margin trick.
absCenter(width, height=false)
	position: absolute
	left: 50%
	width: width
	if height
		// if height is given then set that property too
		height: height
	margin-left: -(width / 2)

// vertically middle-aligns an element using absolute positioning and negative half-height margin trick
absMiddle(width, height=false)
	position: absolute
	top: 50%
	if height
		// if height is given then set size and use height for positioning
		size(width, height)
		margin-top: -(height / 2)
	else
		// otherwise, make it a square
		square(width)
		margin-top: -(width / 2)
	
// create a CSS arrow??
arrow( size, color, direction )
	width: 0;
	height: 0;	
	if direction = up
		border-left: size solid transparent
		border-right: size solid transparent
		border-bottom: size solid color
	if direction = 'down'
		border-left: size solid transparent;
		border-right: size solid transparent;
		border-top: size solid color;
	if direction = 'right'
		border-top: size solid transparent;
		border-bottom: size solid transparent;
		border-left: size solid color;
	else
		border-top: size solid transparent;
		border-bottom: size solid transparent; 
		border-right: size solid color;

	