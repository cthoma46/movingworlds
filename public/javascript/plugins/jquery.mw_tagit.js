// Generated by CoffeeScript 1.4.0

(function($) {
  return $.widget("ui.tagit", {
    options: {
      itemName: "item",
      fieldName: "tags",
      availableTags: [],
      tagSource: null,
      removeConfirmation: false,
      caseSensitive: true,
      minChars: 2,
      selectionLimit: 50,
      placeholderText: "enter multiple values",
      allowSpaces: true,
      singleField: false,
      singleFieldDelimiter: ",",
      singleFieldNode: null,
      tabIndex: null,
      onTagAdded: null,
      onTagRemoved: null,
      onTagClicked: null
    },
    _create: function() {
      var node, tags, that;
      that = this;
      if (this.element.data("max")) {
        this.options.selectionLimit = this.element.data("max");
      }
      if (this.element.is("input")) {
        this.tagList = $("<ul></ul>").insertAfter(this.element);
        this.options.singleField = true;
        this.options.singleFieldNode = this.element;
        this.element.css("display", "none");
      } else {
        this.tagList = this.element.find("ul, ol").andSelf().last();
      }
      this._tagInput = $("<input type=\"text\">").addClass("ui-widget-content");
      this._tagInput.attr("tabindex", this.element.attr("tabIndex") || this.options.tabIndex);
      this._tagInput.attr("placeholder", this.element.attr("placeholder" || this.options.placeholderText));
      this._tagInput.attr("tagSource", this.element.data("source") || this.options.tagSource);
      this.options.tagSource = this.options.tagSource || function(search, showChoices) {
        var choices, filter;
        filter = search.term.toLowerCase();
        choices = $.grep(that.options.availableTags, function(element) {
          return element.toLowerCase().indexOf(filter) === 0;
        });
        return showChoices(that._subtractArray(choices, that.assignedTags()));
      };
      this.tagList.addClass("tagit").addClass("ui-widget ui-widget-content ui-corner-all").append($("<li class=\"tagit-new\"></li>").append(this._tagInput)).click(function(e) {
        var target;
        target = $(e.target);
        if (target.hasClass("tagit-label")) {
          return that._trigger("onTagClicked", e, target.closest(".tagit-choice"));
        } else {
          return that._tagInput.focus();
        }
      });
      this.tagList.children("li").each(function() {
        if (!$(this).hasClass("tagit-new")) {
          that.createTag($(this).html(), $(this).attr("class"));
          return $(this).remove();
        }
      });
      if (this.options.singleField) {
        if (this.options.singleFieldNode) {
          node = $(this.options.singleFieldNode);
          tags = node.val().split(this.options.singleFieldDelimiter);
          node.val("");
          $.each(tags, function(index, tag) {
            return that.createTag(tag);
          });
        } else {
          this.options.singleFieldNode = this.tagList.after("<input type=\"hidden\" style=\"display:none;\" value=\"\" name=\"" + this.options.fieldName + "\">");
        }
      }
      if (this.options.availableTags || this.options.tagSource) {
        this._tagInput.autocomplete({
          source: this.options.tagSource,
          minLength: 2,
          select: function(event, ui) {
            if (that._tagInput.val() === "") {
              that.removeTag(that._lastTag(), false);
            }
            console.log("ITEM: ", ui.item);
            that.createTag(ui.item.value, ui.item.label);
            return false;
          }
        });
      }
      return this._tagInput.keydown(function(event) {
        var tag;
        if (event.which === $.ui.keyCode.BACKSPACE && that._tagInput.val() === "") {
          tag = that._lastTag();
          if (!that.options.removeConfirmation || tag.hasClass("remove")) {
            that.removeTag(tag);
          } else {
            if (that.options.removeConfirmation) {
              tag.addClass("remove ui-state-highlight");
            }
          }
        } else {
          if (that.options.removeConfirmation) {
            that._lastTag().removeClass("remove ui-state-highlight");
          }
        }
        if (event.which === $.ui.keyCode.COMMA || event.which === $.ui.keyCode.ENTER || (event.which === $.ui.keyCode.TAB && that._tagInput.val() !== "") || (event.which === $.ui.keyCode.SPACE && that.options.allowSpaces !== true && ($.trim(that._tagInput.val()).replace(/^s*/, "").charAt(0) !== "\"" || ($.trim(that._tagInput.val()).charAt(0) === "\"" && $.trim(that._tagInput.val()).charAt($.trim(that._tagInput.val()).length - 1) === "\"" && $.trim(that._tagInput.val()).length - 1 !== 0 && $.trim(that._tagInput.val()).length >= this.options.minChars)))) {
          event.preventDefault();
          that.createTag(that._cleanedInput());
          return that._tagInput.autocomplete("close");
        }
      }).blur(function(e) {
        return that.createTag(that._cleanedInput());
      });
    },
    _cleanedInput: function() {
      return $.trim(this._tagInput.val().replace(/^"(.*)"$/, "$1"));
    },
    _lastTag: function() {
      return this.tagList.children(".tagit-choice:last");
    },
    assignedTags: function() {
      var tags, that;
      that = this;
      tags = [];
      if (this.options.singleField) {
        tags = $(this.options.singleFieldNode).val().split(this.options.singleFieldDelimiter);
        if (tags[0] === "") {
          tags = [];
        }
      } else {
        this.tagList.children(".tagit-choice").each(function() {
          return tags.push(that.tagLabel(this));
        });
      }
      return tags;
    },
    _updateSingleTagsField: function(tags) {
      return $(this.options.singleFieldNode).val(tags.join(this.options.singleFieldDelimiter));
    },
    _subtractArray: function(a1, a2) {
      var i, result;
      result = [];
      i = 0;
      while (i < a1.length) {
        if ($.inArray(a1[i], a2) === -1) {
          result.push(a1[i]);
        }
        i++;
      }
      return result;
    },
    tagLabel: function(tag) {
      if (this.options.singleField) {
        return $(tag).children(".tagit-label").text();
      } else {
        return $(tag).children("input").val();
      }
    },
    _isNew: function(value) {
      var isNew, that;
      that = this;
      isNew = true;
      this.tagList.children(".tagit-choice").each(function(i) {
        if (that._formatStr(value) === that._formatStr(that.tagLabel(this))) {
          isNew = false;
          return false;
        }
      });
      return isNew;
    },
    _formatStr: function(str) {
      if (this.options.caseSensitive) {
        return str;
      }
      return $.trim(str.toLowerCase());
    },
    createTag: function(value, tagLabel, additionalClass) {
      var escapedValue, label, removeTag, removeTagIcon, tag, tags, that;
      that = this;
      value = $.trim(value);
      if (!this._isNew(value) || value === "") {
        return false;
      }
      if (this.assignedTags().length === this.options.selectionLimit) {
        this._tagInput.val("");
        return false;
      }
      if (tagLabel) {
        label = $((this.options.onTagClicked ? "<a class=\"tagit-label\"></a>" : "<span class=\"tagit-label\"></span>")).text(tagLabel);
      } else {
        label = $((this.options.onTagClicked ? "<a class=\"tagit-label\"></a>" : "<span class=\"tagit-label\"></span>")).text(value);
      }
      tag = $("<li></li>").addClass("tagit-choice ui-widget-content ui-state-default ui-corner-all").addClass(additionalClass).append(label);
      removeTagIcon = $("<span></span>").addClass("ui-icon ui-icon-close");
      removeTag = $("<a><span class=\"text-icon\">Ã—</span></a>").addClass("close").append(removeTagIcon).click(function(e) {
        return that.removeTag(tag);
      });
      tag.append(removeTag);
      if (this.options.singleField) {
        tags = this.assignedTags();
        tags.push(value);
        this._updateSingleTagsField(tags);
      } else {
        if (tagLabel) {
          tag.append("<input type=\"hidden\" style=\"display:none;\" value=\"" + value + "\" name=\"" + this.options.itemName + "[" + this.options.fieldName + "][]\" />");
        } else {
          escapedValue = label.html();
          tag.append("<input type=\"hidden\" style=\"display:none;\" value=\"" + escapedValue + "\" name=\"" + this.options.itemName + "[" + this.options.fieldName + "][]\" />");
        }
      }
      this._trigger("onTagAdded", null, tag);
      this._tagInput.val("");
      return this._tagInput.parent().before(tag);
    },
    removeTag: function(tag, animate) {
      var removedTagLabel, tags;
      if (typeof animate === "undefined") {
        animate = true;
      }
      tag = $(tag);
      this._trigger("onTagRemoved", null, tag);
      if (this.options.singleField) {
        tags = this.assignedTags();
        removedTagLabel = this.tagLabel(tag);
        tags = $.grep(tags, function(el) {
          return el !== removedTagLabel;
        });
        this._updateSingleTagsField(tags);
      }
      if (animate) {
        return tag.fadeOut("fast").hide("blind", {
          direction: "horizontal"
        }, "fast", function() {
          return tag.remove();
        }).dequeue();
      } else {
        return tag.remove();
      }
    },
    removeAll: function() {
      var that;
      that = this;
      return this.tagList.children(".tagit-choice").each(function(index, tag) {
        return that.removeTag(tag, false);
      });
    }
  });
})(jQuery);
